//
//  User.m
//  Generated by CloudyRec - mobile backend platform.
//  Copyright (c) 2012 Rival Edge Pte Ltd. All rights reserved.
//

#import "User.h"
#import "Quiz.h"
#import "Badge.h"
#import "Mash.h"
#import "Food.h"
@interface User()
-(void)getQuizListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail;
-(void)getBadgeListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail;
-(void)getMashListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail;
-(void)getFoodListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail;
@end
@implementation User 
@synthesize userResKey;
@synthesize username;
@synthesize password;
@synthesize points;
@synthesize quizList;
@synthesize badgeList;
@synthesize mashList;
@synthesize foodList;

-(id)initWithUserUsername:(NSString*)username_ Password:(NSString*)password_ Points:(int)points_{

  if(self=[super init]) {
	    username=[username_ copy];
	    password=[password_ copy];
	    points=points_;
    userResKey=@"tBON5roQca";
  }
  return self;
}

-(void)dealloc {
  [userResKey release];
  [username release];
  [password release];
  [quizList release];
  [badgeList release];
  [mashList release];
  [foodList release];
  [super dealloc];
}

-(id)init {
  if(self=[super init]) {
	self.userResKey=@"tBON5roQca";
  }
  return self;
}


-(NSString*)getId {
  return self._id;
}

-(NSString*)getResourceKey {
return userResKey;
}

-(void)load:(NSString*)id_ onComplete:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail{
   [self loadFromCloud:id_ onComplete:^(NSDictionary* data){
    NSDictionary* dict=[NSDictionary dictionaryWithDictionary:data];
    if(dict!=nil) {
      [self setData:dict];
      completion(YES);
    }
    else {
      completion(NO);
    }
  }onFailure:^(NSError* error){
    fail(error);
  }];
}

-(void) list:(NSString*)query onComplete:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self list:query Limit:10 Page:1 onComplete:completion onFailure:fail];
}

-(void) list:(NSString*)query Limit:(int)limit Page:(int)page onComplete:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  [self listFromCloud:query Limit:limit Page:page onComplete:^(NSArray* complete){
    NSArray* ja;
    NSMutableArray* resources = [[NSMutableArray alloc] init];
    ja =[[NSArray alloc] initWithArray:complete];
    for (NSDictionary* obj in ja) {
      User* res =[[User alloc] init];
      [res setData:obj];
      [resources addObject:res];
      [res release];
    }
    [ja release];
    completion([resources autorelease]);
  }onFailure:^(NSError* error){
    
    fail(error);
  }];

}

-(void) getQuizListWithCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self getQuizListWithReload:NO Limit:10 Page:1 onCompletion:completion onFailure:fail];
}

-(void)getQuizListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail {
  Quiz* exp =[[Quiz alloc] init];
  
  if(quizList){
  	[quizList release];
  }

  quizList=[[NSMutableArray alloc] init];
  
  [self listChildren:exp filter:query Limit:limit Page:page onComplete:^(NSArray* resArr){
    
    [exp release];
    for (int i=0;i<[resArr count]; i++) {
      NSDictionary* obj=[resArr objectAtIndex:i];
      Quiz* s = [[Quiz alloc] init];
      [s setData:obj];
      [self.quizList addObject:s];
      [s release];
    }
    completion(self.quizList);
  }onFailure:^(NSError* err){
    fail(err);
    [exp release];
  }];
}

-(void) getQuizListWithReload:(BOOL)reload Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.quizList==nil)
  {
    [self getQuizListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
  }
  else {
    if(reload) {
      [self getQuizListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
    }
    else {
      completion(self.quizList);
    }
  }
  
}

-(void) getQuizListWithReload:(BOOL)reload Filter:(NSString *)query Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail
{
    if(self.quizList==nil)
    {
      [self getQuizListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
    }
    else {
        if(reload) {
	  [self getQuizListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
        }
        else {
	  completion(self.quizList);
        }
    }
}

-(void)getQuizListWithReload:(BOOL)reload onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.quizList==nil)
  {
    [self getQuizListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
  }
  else {
    if(reload) {
      [self getQuizListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
    }
    else {
    completion(self.quizList);
    }
  }
}

-(void) getBadgeListWithCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self getBadgeListWithReload:NO Limit:10 Page:1 onCompletion:completion onFailure:fail];
}

-(void)getBadgeListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail {
  Badge* exp =[[Badge alloc] init];
  
  if(badgeList){
  	[badgeList release];
  }

  badgeList=[[NSMutableArray alloc] init];
  
  [self listChildren:exp filter:query Limit:limit Page:page onComplete:^(NSArray* resArr){
    
    [exp release];
    for (int i=0;i<[resArr count]; i++) {
      NSDictionary* obj=[resArr objectAtIndex:i];
      Badge* s = [[Badge alloc] init];
      [s setData:obj];
      [self.badgeList addObject:s];
      [s release];
    }
    completion(self.badgeList);
  }onFailure:^(NSError* err){
    fail(err);
    [exp release];
  }];
}

-(void) getBadgeListWithReload:(BOOL)reload Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.badgeList==nil)
  {
    [self getBadgeListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
  }
  else {
    if(reload) {
      [self getBadgeListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
    }
    else {
      completion(self.badgeList);
    }
  }
  
}

-(void) getBadgeListWithReload:(BOOL)reload Filter:(NSString *)query Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail
{
    if(self.badgeList==nil)
    {
      [self getBadgeListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
    }
    else {
        if(reload) {
	  [self getBadgeListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
        }
        else {
	  completion(self.badgeList);
        }
    }
}

-(void)getBadgeListWithReload:(BOOL)reload onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.badgeList==nil)
  {
    [self getBadgeListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
  }
  else {
    if(reload) {
      [self getBadgeListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
    }
    else {
    completion(self.badgeList);
    }
  }
}

-(void) getMashListWithCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self getMashListWithReload:NO Limit:10 Page:1 onCompletion:completion onFailure:fail];
}

-(void)getMashListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail {
  Mash* exp =[[Mash alloc] init];
  
  if(mashList){
  	[mashList release];
  }

  mashList=[[NSMutableArray alloc] init];
  
  [self listChildren:exp filter:query Limit:limit Page:page onComplete:^(NSArray* resArr){
    
    [exp release];
    for (int i=0;i<[resArr count]; i++) {
      NSDictionary* obj=[resArr objectAtIndex:i];
      Mash* s = [[Mash alloc] init];
      [s setData:obj];
      [self.mashList addObject:s];
      [s release];
    }
    completion(self.mashList);
  }onFailure:^(NSError* err){
    fail(err);
    [exp release];
  }];
}

-(void) getMashListWithReload:(BOOL)reload Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.mashList==nil)
  {
    [self getMashListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
  }
  else {
    if(reload) {
      [self getMashListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
    }
    else {
      completion(self.mashList);
    }
  }
  
}

-(void) getMashListWithReload:(BOOL)reload Filter:(NSString *)query Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail
{
    if(self.mashList==nil)
    {
      [self getMashListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
    }
    else {
        if(reload) {
	  [self getMashListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
        }
        else {
	  completion(self.mashList);
        }
    }
}

-(void)getMashListWithReload:(BOOL)reload onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.mashList==nil)
  {
    [self getMashListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
  }
  else {
    if(reload) {
      [self getMashListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
    }
    else {
    completion(self.mashList);
    }
  }
}

-(void) getFoodListWithCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self getFoodListWithReload:NO Limit:10 Page:1 onCompletion:completion onFailure:fail];
}

-(void)getFoodListReloadWithCompletion:(cloudyRecRespondBlock)completion Filter:(NSString *)query Limit:(int)limit Page:(int)page onFailure:(cloudyRecRespondErrorBlock)fail {
  Food* exp =[[Food alloc] init];
  
  if(foodList){
  	[foodList release];
  }

  foodList=[[NSMutableArray alloc] init];
  
  [self listChildren:exp filter:query Limit:limit Page:page onComplete:^(NSArray* resArr){
    
    [exp release];
    for (int i=0;i<[resArr count]; i++) {
      NSDictionary* obj=[resArr objectAtIndex:i];
      Food* s = [[Food alloc] init];
      [s setData:obj];
      [self.foodList addObject:s];
      [s release];
    }
    completion(self.foodList);
  }onFailure:^(NSError* err){
    fail(err);
    [exp release];
  }];
}

-(void) getFoodListWithReload:(BOOL)reload Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.foodList==nil)
  {
    [self getFoodListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
  }
  else {
    if(reload) {
      [self getFoodListReloadWithCompletion:completion Filter:nil Limit:limit Page:page onFailure:fail];
    }
    else {
      completion(self.foodList);
    }
  }
  
}

-(void) getFoodListWithReload:(BOOL)reload Filter:(NSString *)query Limit:(int)limit Page:(int)page onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail
{
    if(self.foodList==nil)
    {
      [self getFoodListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
    }
    else {
        if(reload) {
	  [self getFoodListReloadWithCompletion:completion Filter:query Limit:limit Page:page onFailure:fail];
        }
        else {
	  completion(self.foodList);
        }
    }
}

-(void)getFoodListWithReload:(BOOL)reload onCompletion:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self.foodList==nil)
  {
    [self getFoodListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
  }
  else {
    if(reload) {
      [self getFoodListReloadWithCompletion:completion Filter:nil Limit:10 Page:1 onFailure:fail];
    }
    else {
    completion(self.foodList);
    }
  }
}


-(void)saveWithCompletion:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  NSMutableDictionary* data = [[NSMutableDictionary alloc] init];
	//date format
	NSDateFormatter *df = [[NSDateFormatter alloc] init];
	[df setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"] autorelease]];
	NSTimeZone *timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
	[df setTimeZone:timeZone];
	[df setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
  [data setValue:self.username forKey:@"username"];
  [data setValue:self.password forKey:@"password"];
	  [data setValue:[NSNumber numberWithInteger:self.points] forKey:@"points"];

  [df release];
  if(self._id==nil)
  {
    //self._id=[self insertToCloud:data];
    [self insertToCloud:data onComplete:^(NSString* respond){
      self._id = respond;
      
      if(self._id==nil)
      {
        completion(NO);
      }
      else {
          completion(YES);
      }
    }onFailure:^(NSError* err){
      fail(err);
    }];
  }
  else {
    [self updateToCloud:data onComplete:^(NSString* respond){
      self._id = respond;
      
      if(self._id==nil)
      {
        completion(NO);
      }
      else {
        completion(YES);
      }
      
    }onFailure:^(NSError *error){
      fail(error);
    }];
  }
  [data release];
}

-(void)deleteWithCompletion:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self._id==nil)
  {
    completion(NO);
  }
  [self deleteFromCloudWithonComplete:^(BOOL respond){
    if(respond) {
      self._id=nil;
    }
    
    completion(respond);
  }onFailure:^(NSError* err){
    fail(err);
  }];
  
}

-(void)setData:(NSDictionary*)data {
  self._id=[data objectForKey:@"id"];

	//date format
	NSDateFormatter *df = [[NSDateFormatter alloc] init];
	[df setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"] autorelease]];
	NSTimeZone *timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
	[df setTimeZone:timeZone];
	[df setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
	  self.username=[data objectForKey:@"username"];
	  self.password=[data objectForKey:@"password"];
	  self.points=[[data objectForKey:@"points"] intValue];
        [df release];
}
@end
