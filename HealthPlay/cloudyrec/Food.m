//
//  Food.m
//  Generated by CloudyRec - mobile backend platform.
//  Copyright (c) 2012 Rival Edge Pte Ltd. All rights reserved.
//

#import "User.h"
#import "Food.h"
@interface Food()
@end
@implementation Food 
@synthesize foodResKey;
@synthesize _master_id;
@synthesize name;
@synthesize image;
@synthesize grade;
@synthesize user;
@synthesize time;
@synthesize comment;

-(id)initWithFoodName:(NSString*)name_ Image:(NSString*)image_ Grade:(NSString*)grade_ User:(NSString*)user_ Time:(NSDate*)time_ Comment:(NSString*)comment_{

  if(self=[super init]) {
	    name=[name_ copy];
	    image=[image_ copy];
	    grade=[grade_ copy];
	    user=[user_ copy];
	    time=[time_ copy];
	    comment=[comment_ copy];
    foodResKey=@"YBJNWrtQLC";
  }
  return self;
}

-(void)dealloc {
  [foodResKey release];
  [name release];
  [image release];
  [grade release];
  [user release];
  [time release];
  [comment release];
  [super dealloc];
}

-(id)init {
  if(self=[super init]) {
	self.foodResKey=@"YBJNWrtQLC";
  }
  return self;
}


-(NSString*)getId {
  return self._id;
}

-(NSString*)getResourceKey {
return foodResKey;
}

-(NSString*)getUserId{
  return _master_id;
}
-(void)load:(NSString*)id_ onComplete:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail{
   [self loadFromCloud:id_ onComplete:^(NSDictionary* data){
    NSDictionary* dict=[NSDictionary dictionaryWithDictionary:data];
    if(dict!=nil) {
      [self setData:dict];
      completion(YES);
    }
    else {
      completion(NO);
    }
  }onFailure:^(NSError* error){
    fail(error);
  }];
}
-(void)setUser:(User*)obj {
  if([obj getId]==nil) {
    @throw ([NSException exceptionWithName:@"Error" reason:@"unsaved master object exception" userInfo:nil]);
  }
  else {
    self._master_id = [obj getId];
  }
}

-(void) list:(NSString*)query onComplete:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  [self list:query Limit:10 Page:1 onComplete:completion onFailure:fail];
}

-(void) list:(NSString*)query Limit:(int)limit Page:(int)page onComplete:(cloudyRecRespondBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  [self listFromCloud:query Limit:limit Page:page onComplete:^(NSArray* complete){
    NSArray* ja;
    NSMutableArray* resources = [[NSMutableArray alloc] init];
    ja =[[NSArray alloc] initWithArray:complete];
    for (NSDictionary* obj in ja) {
      Food* res =[[Food alloc] init];
      [res setData:obj];
      [resources addObject:res];
      [res release];
    }
    [ja release];
    completion([resources autorelease]);
  }onFailure:^(NSError* error){
    
    fail(error);
  }];

}


-(void)saveWithCompletion:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  NSMutableDictionary* data = [[NSMutableDictionary alloc] init];
  [data setValue:self._master_id forKey:@"_master_id"];
	//date format
	NSDateFormatter *df = [[NSDateFormatter alloc] init];
	[df setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"] autorelease]];
	NSTimeZone *timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
	[df setTimeZone:timeZone];
	[df setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
  [data setValue:self.name forKey:@"name"];
  [data setValue:self.image forKey:@"image"];
  [data setValue:self.grade forKey:@"grade"];
  [data setValue:self.user forKey:@"user"];
	  NSString* tmp_date_time=[df stringFromDate:self.time];
	  [data setValue:tmp_date_time forKey:@"time"];
  [data setValue:self.comment forKey:@"comment"];

  [df release];
  if(self._id==nil)
  {
    //self._id=[self insertToCloud:data];
    [self insertToCloud:data onComplete:^(NSString* respond){
      self._id = respond;
      
      if(self._id==nil)
      {
        completion(NO);
      }
      else {
          completion(YES);
      }
    }onFailure:^(NSError* err){
      fail(err);
    }];
  }
  else {
    [self updateToCloud:data onComplete:^(NSString* respond){
      self._id = respond;
      
      if(self._id==nil)
      {
        completion(NO);
      }
      else {
        completion(YES);
      }
      
    }onFailure:^(NSError *error){
      fail(error);
    }];
  }
  [data release];
}

-(void)deleteWithCompletion:(cloudyRecRespondBoolBlock)completion onFailure:(cloudyRecRespondErrorBlock)fail {
  
  if(self._id==nil)
  {
    completion(NO);
  }
  [self deleteFromCloudWithonComplete:^(BOOL respond){
    if(respond) {
      self._id=nil;
    }
    
    completion(respond);
  }onFailure:^(NSError* err){
    fail(err);
  }];
  
}

-(void)setData:(NSDictionary*)data {
  self._id=[data objectForKey:@"id"];
  self._master_id =[data objectForKey:@"_master_id"]; 

	//date format
	NSDateFormatter *df = [[NSDateFormatter alloc] init];
	[df setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"] autorelease]];
	NSTimeZone *timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
	[df setTimeZone:timeZone];
	[df setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
	  self.name=[data objectForKey:@"name"];
	  self.image=[data objectForKey:@"image"];
	  self.grade=[data objectForKey:@"grade"];
	  self.user=[data objectForKey:@"user"];
  NSString* date_str_time=[data objectForKey:@"time"];
  self.time=[df dateFromString:date_str_time];

	  self.comment=[data objectForKey:@"comment"];
        [df release];
}
@end
